{
	"name": "dataflow_blob_to_sql",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "arquivo_vendas",
						"type": "DatasetReference"
					},
					"name": "arquivoVendas1"
				},
				{
					"dataset": {
						"referenceName": "arquivo_vendas",
						"type": "DatasetReference"
					},
					"name": "arquivoVendas2"
				},
				{
					"dataset": {
						"referenceName": "arquivo_vendas",
						"type": "DatasetReference"
					},
					"name": "arquivoVendas3"
				},
				{
					"dataset": {
						"referenceName": "arquivo_vendas",
						"type": "DatasetReference"
					},
					"name": "arquivoVendas4"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dataset_blob",
						"type": "DatasetReference"
					},
					"name": "salvaBlobCliente"
				},
				{
					"dataset": {
						"referenceName": "dataset_blob",
						"type": "DatasetReference"
					},
					"name": "salvaBlobCidade"
				},
				{
					"dataset": {
						"referenceName": "dataset_blob",
						"type": "DatasetReference"
					},
					"name": "salvaBlobProduto"
				},
				{
					"dataset": {
						"referenceName": "dataset_blob",
						"type": "DatasetReference"
					},
					"name": "salvaBlobVenda"
				}
			],
			"transformations": [
				{
					"name": "selectCliente"
				},
				{
					"name": "cast1"
				},
				{
					"name": "agregacaoValoresDistintos"
				},
				{
					"name": "selectCidade"
				},
				{
					"name": "cast2"
				},
				{
					"name": "aggValoresDistintosCidade"
				},
				{
					"name": "padronizandoNomeCidade",
					"description": "Algumas linhas com nome SSA em vez de Salvador"
				},
				{
					"name": "selectProduto"
				},
				{
					"name": "cast3"
				},
				{
					"name": "aggValoresDistintosProdutos"
				},
				{
					"name": "selectVendas"
				},
				{
					"name": "cast4"
				},
				{
					"name": "aggValoresDistintosVendas"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id_venda as string,",
				"          cod_cliente as string,",
				"          nom_cliente as string,",
				"          cod_vendedor as string,",
				"          nom_vendedor as string,",
				"          cod_cidade as string,",
				"          nom_cidade as string,",
				"          cod_produto as string,",
				"          Nom_produto as string,",
				"          cod_marca as string,",
				"          Nom_marca as string,",
				"          cod_departamento as string,",
				"          nom_departamento as string,",
				"          cod_gerencia as string,",
				"          nom_gerencia as string,",
				"          Ano_venda as string,",
				"          Mes_venda as string,",
				"          Dia_venda as string,",
				"          dtc_venda as string,",
				"          qtd_venda as string,",
				"          val_venda as string,",
				"          num_nota as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> arquivoVendas1",
				"source(output(",
				"          id_venda as string,",
				"          cod_cliente as string,",
				"          nom_cliente as string,",
				"          cod_vendedor as string,",
				"          nom_vendedor as string,",
				"          cod_cidade as string,",
				"          nom_cidade as string,",
				"          cod_produto as string,",
				"          Nom_produto as string,",
				"          cod_marca as string,",
				"          Nom_marca as string,",
				"          cod_departamento as string,",
				"          nom_departamento as string,",
				"          cod_gerencia as string,",
				"          nom_gerencia as string,",
				"          Ano_venda as string,",
				"          Mes_venda as string,",
				"          Dia_venda as string,",
				"          dtc_venda as string,",
				"          qtd_venda as string,",
				"          val_venda as string,",
				"          num_nota as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> arquivoVendas2",
				"source(output(",
				"          id_venda as string,",
				"          cod_cliente as string,",
				"          nom_cliente as string,",
				"          cod_vendedor as string,",
				"          nom_vendedor as string,",
				"          cod_cidade as string,",
				"          nom_cidade as string,",
				"          cod_produto as string,",
				"          Nom_produto as string,",
				"          cod_marca as string,",
				"          Nom_marca as string,",
				"          cod_departamento as string,",
				"          nom_departamento as string,",
				"          cod_gerencia as string,",
				"          nom_gerencia as string,",
				"          Ano_venda as string,",
				"          Mes_venda as string,",
				"          Dia_venda as string,",
				"          dtc_venda as string,",
				"          qtd_venda as string,",
				"          val_venda as string,",
				"          num_nota as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> arquivoVendas3",
				"source(output(",
				"          id_venda as string,",
				"          cod_cliente as string,",
				"          nom_cliente as string,",
				"          cod_vendedor as string,",
				"          nom_vendedor as string,",
				"          cod_cidade as string,",
				"          nom_cidade as string,",
				"          cod_produto as string,",
				"          Nom_produto as string,",
				"          cod_marca as string,",
				"          Nom_marca as string,",
				"          cod_departamento as string,",
				"          nom_departamento as string,",
				"          cod_gerencia as string,",
				"          nom_gerencia as string,",
				"          Ano_venda as string,",
				"          Mes_venda as string,",
				"          Dia_venda as string,",
				"          dtc_venda as string,",
				"          qtd_venda as string,",
				"          val_venda as string,",
				"          num_nota as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> arquivoVendas4",
				"arquivoVendas1 select(mapColumn(",
				"          idcliente = cod_cliente,",
				"          nomecliente = nom_cliente",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCliente",
				"selectCliente cast(output(",
				"          idcliente as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 aggregate(groupBy(idcliente,",
				"          nomecliente),",
				"     idclienteagg = first(idcliente)) ~> agregacaoValoresDistintos",
				"arquivoVendas2 select(mapColumn(",
				"          idcidade = cod_cidade,",
				"          nomecidade = nom_cidade",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCidade",
				"padronizandoNomeCidade cast(output(",
				"          idcidade as integer",
				"     ),",
				"     errors: true) ~> cast2",
				"cast2 aggregate(groupBy(idcidade,",
				"          nomecidade),",
				"     idcidadeagg = first(idcidade)) ~> aggValoresDistintosCidade",
				"selectCidade derive(nomecidade = iif(trim(nomecidade) == 'SSA', 'Salvador', nomecidade)) ~> padronizandoNomeCidade",
				"arquivoVendas3 select(mapColumn(",
				"          idproduto = cod_produto,",
				"          nomeproduto = Nom_produto,",
				"          nomecategoria = nom_departamento",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectProduto",
				"selectProduto cast(output(",
				"          idproduto as integer",
				"     ),",
				"     errors: true) ~> cast3",
				"cast3 aggregate(groupBy(idproduto,",
				"          nomeproduto,",
				"          nomecategoria),",
				"     idprodutoagg = first(idproduto)) ~> aggValoresDistintosProdutos",
				"arquivoVendas4 select(mapColumn(",
				"          idvenda = id_venda,",
				"          idcliente = cod_cliente,",
				"          idcidade = cod_cidade,",
				"          idproduto = cod_produto,",
				"          quantidade = qtd_venda,",
				"          valor_total = val_venda",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectVendas",
				"selectVendas cast(output(",
				"          idvenda as integer,",
				"          idcliente as integer,",
				"          idcidade as integer,",
				"          idproduto as integer,",
				"          quantidade as integer,",
				"          valor_total as float",
				"     ),",
				"     errors: true) ~> cast4",
				"cast4 aggregate(groupBy(idvenda,",
				"          idcliente,",
				"          idcidade,",
				"          idproduto,",
				"          quantidade,",
				"          valor_total),",
				"     idvendaagg = first(idvenda)) ~> aggValoresDistintosVendas",
				"agregacaoValoresDistintos sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          idcliente as string,",
				"          nomecliente as string",
				"     ),",
				"     partitionFileNames:['clientes_vendas.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> salvaBlobCliente",
				"aggValoresDistintosCidade sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          idcliente as string,",
				"          nomecliente as string",
				"     ),",
				"     partitionFileNames:['cidades_vendas.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> salvaBlobCidade",
				"aggValoresDistintosProdutos sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          idcliente as string,",
				"          nomecliente as string",
				"     ),",
				"     partitionFileNames:['produtos_vendas.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> salvaBlobProduto",
				"aggValoresDistintosVendas sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          idcliente as string,",
				"          nomecliente as string",
				"     ),",
				"     partitionFileNames:['venda_vendas.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> salvaBlobVenda"
			]
		}
	}
}